#
# Copyright (c) 2006-2014 Wade Alcorn - wade@bindshell.net
# Browser Exploitation Framework (BeEF) - http://beefproject.com
# See the file 'doc/COPYING' for copying permission
#
# BeEF Configuration file

beef:
    version: '0.4.5.1-alpha'
    # More verbose messages (server-side)
    debug: <%= @config['debug'] %>
    # More verbose messages (client-side)
    client_debug: <%= @config['client_debug'] %>
    # Used for generating secure tokens
    crypto_default_value_length: <%= @config['crypto_default_value_length'] %>

    # Interface / IP restrictions
    restrictions:
        # subnet of IP addresses that can hook to the framework
        permitted_hooking_subnet: "<%= @config['restrictions']['permitted_hooking_subnet'] %>"
        # subnet of IP addresses that can connect to the admin UI
        #permitted_ui_subnet: "127.0.0.1/32"
        permitted_ui_subnet: "<%= @config['restrictions']['permitted_ui_subnet'] %>"

    # HTTP server
    http:
        debug: <%= @config['http']['debug'] %> #Thin::Logging.debug, very verbose. Prints also full exception stack trace.
        host: "<%= @config['http']['host'] %>"
        port: "<%= @config['http']['port'] %>"

        # Decrease this setting to 1,000 (ms) if you want more responsiveness
        #  when sending modules and retrieving results.
        # NOTE: A poll timeout of less than 5,000 (ms) might impact performance
        #  when hooking lots of browsers (50+).
        # Enabling WebSockets is generally better (beef.websocket.enable)
        xhr_poll_timeout: <%= @config['http']['xhr_poll_timeout'] %>

        # Reverse Proxy / NAT
        # If BeEF is running behind a reverse proxy or NAT
        #  set the public hostname and port here
        #public: ""      # public hostname/IP address
        #public_port: "" # experimental

        # DNS
        dns_host: "<%= @config['http']['dns_host'] %>"
        dns_port: <%= @config['http']['dns_port'] %>

        # Web Admin user interface URI
        web_ui_basepath: "<%= @config['http']['web_ui_basepath'] %>"

        # Hook
        hook_file: "<%= @config['http']['hook_file'] %>"
        hook_session_name: "<%= @config['http']['hook_session_name'] %>"
        session_cookie_name: "<%= @config['http']['session_cookie_name'] %>"

        # Allow one or multiple origins to access the RESTful API using CORS
        # For multiple origins use: "http://browserhacker.com, http://domain2.com"
        restful_api:
            allow_cors: <%= @config['http']['restful_api']['allow_cors'] %>
            cors_allowed_domains: "<%= @config['http']['restful_api']['cors_allowed_domains'] %>"

        # Prefer WebSockets over XHR-polling when possible.
        websocket:
            enable: <%= @config['http']['websocket']['enable'] %>
            port: <%= @config['http']['websocket']['port'] %> # WS: good success rate through proxies
            # Use encrypted 'WebSocketSecure'
            # NOTE: works only on HTTPS domains and with HTTPS support enabled in BeEF
            secure: <%= @config['http']['websocket']['secure'] %>
            secure_port: <%= @config['http']['websocket']['secure_port'] %> # WSSecure
            ws_poll_timeout: <%= @config['http']['websocket']['ws_poll_timeout'] %> # poll BeEF every second

        # Imitate a specified web server (default root page, 404 default error page, 'Server' HTTP response header)
        web_server_imitation:
            enable: <%= @config['http']['web_server_imitation']['enable'] %>
            type: "<%= @config['http']['web_server_imitation']['type'] %>" # Supported: apache, iis, nginx

        # Experimental HTTPS support for the hook / admin / all other Thin managed web services
        https:
            enable: <%= @config['http']['https']['enable'] %>
            # In production environments, be sure to use a valid certificate signed for the value
            # used in beef.http.dns_host (the domain name of the server where you run BeEF)
            key: "<%= @config['http']['https']['key'] %>"
            cert: "<%= @config['http']['https']['cert'] %>"

    database:
        # For information on using other databases please read the
        # README.databases file

        # supported DBs: sqlite, mysql, postgres
        # NOTE: you must change the Gemfile adding a gem require line like:
        #   gem "dm-postgres-adapter"
        # or
        #   gem "dm-mysql-adapter"
        # if you want to switch drivers from sqlite to postgres (or mysql).
        # Finally, run a 'bundle install' command and start BeEF.
        driver: "<%= @config['database']['driver'] %>"

        # db_file is only used for sqlite
        db_file: "<%= @config['database']['db_file'] %>"

        # db connection information is only used for mysql/postgres
        db_host: "<%= @config['database']['db_host'] %>"
        db_port: <%= @config['database']['db_port'] %>
        db_name: "<%= @config['database']['db_name'] %>"
        db_user: "<%= @config['database']['db_user'] %>"
        db_passwd: "<%= @config['database']['db_passwd'] %>"
        db_encoding: "<%= @config['database']['db_encoding'] %>"

    # Credentials to authenticate in BeEF.
    # Used by both the RESTful API and the Admin_UI extension
    credentials:
        user:   "<%= @config['credentials']['user'] %>"
        passwd: "<%= @config['credentials']['passwd'] %>"

    # Autorun modules as soon the browser is hooked.
    # NOTE: only modules with target type 'working' or 'user_notify' can be run automatically.
    autorun:
        enable: <%= @config['autorun']['enable'] %>
        # set this to TRUE if you want to allow auto-run execution for modules with target->user_notify
        allow_user_notify: <%= @config['autorun']['allow_user_notify'] %>

    # IP Geolocation
    # NOTE: requires MaxMind database:
    #   curl -O http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz
    #   gunzip GeoLiteCity.dat.gz && mkdir /opt/GeoIP && mv GeoLiteCity.dat /opt/GeoIP
    geoip:
        enable: <%= @config['geoip']['enable'] %>
        database: '<%= @config['geoip']['database'] %>'

    # You may override default extension configuration parameters here
    extension:
        requester:
            enable: <%= @config['extension']['requester']['enable'] %>
        proxy:
            enable: <%= @config['extension']['proxy']['enable'] %>
        metasploit:
            enable: <%= @config['extension']['metasploit']['enable'] %>
        social_engineering:
            enable: <%= @config['extension']['social_engineering']['enable'] %>
        evasion:
            enable: <%= @config['extension']['evasion']['enable'] %>
        console:
             shell:
                enable: <%= @config['extension']['console']['shell']['enable'] %>
        ipec:
            enable: <%= @config['extension']['ipec']['enable'] %>
        # this is still experimental, we're working on it..
        dns:
            enable: <%= @config['extension']['dns']['enable'] %>
